name: CD

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: yarn install
      - name: Run tests
        run: yarn test

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/smart-sensor-api:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/smart-sensor-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/smart-sensor
            
            # Pull latest changes
            git pull origin main
            
            # Copy environment file
            cp .env.example .env
            
            # Update environment variables
            sed -i "s|DOCKERHUB_USERNAME|${{ secrets.DOCKERHUB_USERNAME }}|g" .env
            
            # Pull latest Docker images
            docker-compose -f docker-compose.prod.yml pull
            
            # Stop existing containers
            docker-compose -f docker-compose.prod.yml down
            
            # Start containers with new images
            docker-compose -f docker-compose.prod.yml up -d
            
            # Wait for services to be healthy
            sleep 30
            
            # Run database migrations
            docker-compose -f docker-compose.prod.yml exec -T api yarn prisma migrate deploy
            
            # Check container health
            if ! docker-compose -f docker-compose.prod.yml ps | grep -q "healthy"; then
              echo "Some containers are not healthy"
              docker-compose -f docker-compose.prod.yml logs
              exit 1
            fi
            
            # Clean up
            docker system prune -f
            docker volume prune -f
            
            # Show container status
            docker-compose -f docker-compose.prod.yml ps
